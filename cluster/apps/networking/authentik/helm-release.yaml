---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authentik
  namespace: networking
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.goauthentik.io
      chart: authentik
      version: "1.0.0"
      sourceRef:
        kind: HelmRepository
        name: authentik-charts
        namespace: flux-system
      interval: 5m
  values:
    image:
      name: ghcr.io/goauthentik/server
      tag: 2021.5.3
      pullPolicy: IfNotPresent

    ingress:
      enabled: true
      ingressClassName: "nginx"
      annotations:
        #nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        forecastle.stakater.com/expose: "true"
        #forecastle.stakater.com/icon:
        cert-manager.io/cluster-issuer: letsencrypt-production
      labels: {}
      hosts:
        - host: auth.witlinserver.com
          paths:
            - path: "/"
              pathType: Prefix
          tls:
        - hosts:
            - "auth.${SECRET_DOMAIN}"
    authentik:
      # -- Log level for server and worker
      log_level: debug
      # -- Secret key used for cookie singing and unique user IDs,
      # don't change this after the first install
      secret_key: "${SECRET_AUTHENTIK_KEY}"
      email:
    # -- SMTP Server emails are sent from, fully optional
        host: "smtp.sendgrid.net"
        port: 587
    # -- SMTP credentials, when left empty, not authentication will be done
        username: "apikey"
    # -- SMTP credentials, when left empty, not authentication will be done
        password: "${SECRET_AUTHENTIK_EMAIL_PASSWORD}"
    # -- Enable either use_tls or use_ssl, they can't be enabled at the same time.
        use_tls: true
    # -- Enable either use_tls or use_ssl, they can't be enabled at the same time.
        use_ssl: false
    # -- Connection timeout
        timeout: 30
    # -- Email from address, can either be in the format "foo@bar.baz" or "Authentik <foo@bar.baz>"
        from: "Authentik <auth@witlinserver.com>"
      outposts:
    # -- Template used for managed outposts. The following placeholders can be used
    # %(type)s - the type of the outpost
    # %(version)s - version of your authentik install
    # %(build_hash)s - only for beta versions, the build hash of the image
        docker_image_base: ghcr.io/goauthentik/%(type)s:%(version)s
      error_reporting:
    # -- This sends anonymous usage-data, stack traces on errors and
    # performance data to sentry.beryju.org, and is fully opt-in
        enabled: true
    # -- This is a string that is sent to sentry with your error reports
        environment: "k8s"
    # -- Send PII (Personally identifiable information) data to sentry
        send_pii: false
      postgresql:
    # -- set the postgresql hostname to talk to
    # if unset and .Values.postgresql.enabled == true, will generate the default
    # @default -- `{{ .Release.Name }}-postgresql`
        host: '{{ .Release.Name }}-postgresql'
    # -- postgresql Database name
    # @default -- `authentik`
        name: "authentik"
    # -- postgresql Username
    # @default -- `authentik`
        user: "authentik"
        #password: "${SECRET_AUTHENTIK_POSTGRES_PASSWORD}"
        port: 5432
      redis:
    # -- set the redis hostname to talk to
    # @default -- `{{ .Release.Name }}-redis-master`
        host: '{{ .Release.Name }}-redis-master'
        password: ""

# -- see configuration options at https://goauthentik.io/docs/installation/configuration/
    env: {}
# AUTHENTIK_VAR_NAME: VALUE

    service:
  # -- Service that is created to access authentik
      enabled: true
      type: ClusterIP
      port: 80
      name: http
      protocol: TCP
      labels: {}
      annotations: {}


    geoip:
  # -- optional GeoIP, deploys a cronjob to download the maxmind database
      enabled: false
      schedule: "0 */8 * * *"
  # -- sign up under https://www.maxmind.com/en/geolite2/signup
      accountId: ""
  # -- sign up under https://www.maxmind.com/en/geolite2/signup
      licenseKey: ""
      editionIds: "GeoLite2-City"

    postgresql:
  # -- enable the bundled bitnami postgresql chart
      enabled: true
      postgresqlUsername: "authentik"
      #postgresqlPassword: "${SECRET_AUTHENTIK_POSTGRES_PASSWORD}"
      postgresqlDatabase: "authentik"
    persistence:
      enabled: false
      storageClass: longhorn
  #   accessModes:
  #     - ReadWriteOnce
    redis:
      # -- enable the bundled bitnami redis chart
      enabled: true
      auth:
        enabled: false
