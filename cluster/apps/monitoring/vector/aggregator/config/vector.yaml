---
data_dir: /vector-data-dir
api:
  enabled: true
enrichment_tables:
  type: geoip
  geoip:
    path: /geoip/GeoLite2-City.mmdb


sinks:
  loki_journal:
    type: loki
    batch:
      max_bytes: 2049000
    encoding:
      codec: json
    endpoint: http://loki-gateway:80
    inputs:
      - journal_logs
    labels:
      hostname: '{{ host }}'
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
  loki_kubernetes:
    type: loki
    batch:
      max_bytes: 2049000
    encoding:
      codec: json
    endpoint: http://loki-gateway:80
    inputs:
      - kubernetes_logs_remap
    labels:
      app: '{{ custom_app_name }}'
      namespace: '{{ kubernetes.pod_namespace }}'
      node: '{{ kubernetes.pod_node_name }}'
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true

  loki_opnsense_filterlog:
    type: loki
    batch:
      max_bytes: 2049000
    encoding:
      codec: json
    endpoint: http://loki-gateway:80
    inputs:
      - opnsense_filterlog_route._unmatched
      - opnsense_filterlog_geoip
    labels:
      hostname: opnsense
    out_of_order_action: accept


sources:
  journal_logs:
    type: vector
    version: "2"
    address: 0.0.0.0:6000
  kubernetes_logs:
    type: vector
    version: "2"
    address: 0.0.0.0:6010
  opnsense_filterlog_logs:
    type: syslog
    address: 0.0.0.0:5140
    mode: udp

transforms:
  kubernetes_logs_remap:
    type: remap
    inputs:
      - kubernetes_logs
    source: |
      # Standardize 'app' index
      .custom_app_name = .pod_labels."app.kubernetes.io/name" || .pod_labels.app || .pod_labels."k8s-app" || "unknown"
  opnsense_filterlog_geoip:
    type: remap
    inputs:
      - opnsense_filterlog_route.pass_action
    source: |
      .geoip = lookup_geoip!(.source_ip)
  opnsense_filterlog_remap:
    type: remap
    inputs:
      - opnsense_filterlog_logs
    source: |
      msg = parse_csv!(string!(.message))
      # Only parse IPv4 / IPv6
      if msg[8] == "4" || msg[8] == "6" {
        .filter_interface = msg[4]
        .filter_direction = msg[7]
        .filter_action = msg[6]
        .filter_ip_version = msg[8]
        .filter_protocol = msg[16]
        .filter_source_ip = msg[18]
        .filter_destination_ip = msg[19]
        if (msg[16] == "icmp" || msg[16] == "igmp" || msg[16] == "gre") {
          .filter_data = msg[20]
        } else {
          .filter_source_port = msg[20]
          .filter_destination_port = msg[21]
          .filter_data_length = msg[22]
          if msg[8] == "4" && msg[16] == "tcp" {
            .filter_tcp_flags = msg[23]
          }
        }
      }
  opnsense_filterlog_route:
    type: route
    inputs:
      - opnsense_filterlog_remap
    route:
      pass_action: .filter_action == "pass"
