---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: falco
  namespace: falco-system
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://falcosecurity.github.io/charts
      chart: falco
      version: 1.16.2
      sourceRef:
        kind: HelmRepository
        name: falco-security-charts
        namespace: flux-system
      interval: 5m
  values:
    image:
      registry: public.ecr.aws
    timezone: "America/New_York"
    containerd:
      enabled: true
      socket: /var/run/k3s/containerd/containerd.sock
    docker:
      enabled: false
    ebpf:
      enabled: true
      settings:
        hostNetwork: true
    falco:
      jsonOutput: true
      jsonIncludeOutputProperty: true
      httpOutput:
        enabled: true
        url: "http://falco-sidekick-falcosidekick:2801"
      grpc:
        enabled: true
      grpcOutput:
        enabled: true
    tolerations:
      - effect: NoSchedule
        operator: Exists
    # https://securityhub.dev/
    customRules:
      rules-admin-activities.yaml: |-
        - rule: Detect su or sudo
          desc: detect sudo activities
          condition:
            spawned_process and proc.name in (sudo, su)
          output: >
            Detected sudo or su privilege escalation activity (user=%user.name command=%proc.cmdline)
          priority: WARNING
          tags: [process]
        - rule: Package Management Launched
          desc: detect package management launched
          condition: >
            spawned_process and user.name != "_apt" and package_mgmt_procs and not package_mgmt_ancestor_procs
          output: >
            Package management process launched in container (user=%user.name
            command=%proc.cmdline container_id=%container.id container_name=%container.name image=%container.image.repository:%container.image.tag)
          priority: ERROR
          tags: [process]
      rules-ssh-connections.yaml: |-
        - rule: Inbound SSH Connection
          desc: Detect Inbound SSH Connection
          condition: >
            ((evt.type in (accept,listen) and evt.dir=<) or
              (evt.type in (recvfrom,recvmsg))) and ssh_port
          output: >
            Inbound SSH connection (user=%user.name client_ip=%fd.cip client_port=%fd.cport server_ip=%fd.sip)
          priority: WARNING
          tags: [network]
        - rule: Outbound SSH Connection
          desc: Detect Outbound SSH Connection
          condition: >
            ((evt.type = connect and evt.dir=<) or
              (evt.type in (sendto,sendmsg))) and ssh_port
          output: >
            Outbound SSH connection (user=%user.name server_ip=%fd.sip server_port=%fd.sport client_ip=%fd.cip)
          priority: WARNING
          tags: [network]
      rules-file-integrity.yaml: |-
        - rule: Detect New File
          desc: detect new file created
          condition: >
            evt.type = chmod or evt.type = fchmod
          output: >
            File below a known directory opened for writing (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])
          priority: ERROR
          tags: [filesystem]
        - rule: Detect New Directory
          desc: detect new directory created
          condition: >
            mkdir
          output: >
            File below a known directory opened for writing (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])
          priority: ERROR
          tags: [filesystem]
        - rule: Detect File Permission or Ownership Change
          desc: detect file permission/ownership change
          condition: >
            spawned_process and proc.name in (chmod, chown) and proc.args contains "/tmp/"
          output: >
            File below a known directory has permission or ownership change (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])
          priority: WARNING
          tags: [filesystem]
        - rule: Detect Directory Change
          desc: detect directories change
          condition: >
            spawned_process and proc.name in (mkdir, rmdir, mvdir, mv)
          output: >
            Directory Change in Filesystem (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2])
          priority: WARNING
          tags: [filesystem]
        - rule: Kernel Module Modification
          desc: detect kernel module change
          condition: >
            spawned_process and proc.name in (insmod, modprobe)
          output: >
            Kernel Module Change (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] result=%evt.res)
          priority: WARNING
          tags: [process]
        - rule: Node Created in Filesystem
          desc: detect node created in filesystem
          condition: >
            spawned_process and proc.name = mknod
          output: >
            Node Creation in Filesystem (user=%user.name
            command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] result=%evt.res)
          priority: WARNING
          tags: [filesystem]
        - rule: Listen on New Port
          desc: Detection a new port is listening
          condition:
            evt.type = listen
          output: >
            A new port is open to listen (port=%fd.sport ip=%fd.sip)
          priority: WARNING
          tags: [network]
      rules-traefik.yaml: |-
        - macro: traefik_consider_syscalls
          condition: (evt.num < 0)
        - macro: app_traefik
          condition: container and container.image startswith "traefik"
        # Restricting listening ports to selected set
        - list: traefik_allowed_inbound_ports_tcp
          items: [443, 80, 8080]
        - rule: Unexpected inbound tcp connection traefik
          desc: Detect inbound traffic to traefik using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (traefik_allowed_inbound_ports_tcp) and app_traefik
          output: Inbound network connection to traefik on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE
        # Restricting spawned processes to selected set
        - list: traefik_allowed_processes
          items: ["traefik"]
        - rule: Unexpected spawned process traefik
          desc: Detect a process started in a traefik container outside of an expected set
          condition: spawned_process and not proc.name in (traefik_allowed_processes) and app_traefik
          output: Unexpected process spawned in traefik container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE
      rules-kubernetes.yaml: |
        #
        # Auto-generated set of falco rules for kube_apiserver containers
        # Generated at 2018-05-23 09:58:49 UTC
        #

        # By default, the autogenerated rules include rules that attempt to
        # restrict the set of system calls that can be performed by
        # applications. However, we know that these rules are fairly FP-prone,
        # so they are disabled by default. If you'd like to enable them,
        # either change or override this macro's condition to "evt.num >= 0".
        - macro: kube_apiserver_consider_syscalls
          condition: (evt.num < 0)

        # These policies are limited to containers, specifically those where
        # the container image name starts with "kube_apiserver"
        - macro: app_kube_apiserver
          condition: container and container.image contains "kube-apiserver"

        # Not considering all inbound networking suspect

        # Not considering all outbound networking suspect

        # Restricting listening ports to selected set

        - list: kube_apiserver_allowed_inbound_ports_tcp
          items: [6443]

        - rule: Unexpected inbound tcp connection kube_apiserver
          desc: Detect inbound traffic to kube_apiserver using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_apiserver_allowed_inbound_ports_tcp) and app_kube_apiserver
          output: Inbound network connection to kube_apiserver on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting spawned processes to selected set

        - list: kube_apiserver_allowed_processes
          items: ["kube-apiserver"]

        - rule: Unexpected spawned process kube_apiserver
          desc: Detect a process started in a kube_apiserver container outside of an expected set
          condition: spawned_process and not proc.name in (kube_apiserver_allowed_processes) and app_kube_apiserver
          output: Unexpected process spawned in kube_apiserver container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting files read or written to specific set

        # Restricting syscalls to selected set

        - list: kube_apiserver_allowed_syscalls
          items: [accept, connect, socket]

        - rule: Unexpected syscall kube_apiserver
          desc: Detect a syscall in a kube_apiserver container outside of an expected set
          condition: kube_apiserver_consider_syscalls and not evt.type in ("<unknown>", kube_apiserver_allowed_syscalls) and app_kube_apiserver
          output: Unexpected syscall in kube_apiserver container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)
          priority: NOTICE
          warn_evttypes: False
        #
        # Auto-generated set of falco rules for kube_controller containers
        # Generated at 2018-05-23 09:58:49 UTC
        #

        # By default, the autogenerated rules include rules that attempt to
        # restrict the set of system calls that can be performed by
        # applications. However, we know that these rules are fairly FP-prone,
        # so they are disabled by default. If you'd like to enable them,
        # either change or override this macro's condition to "evt.num >= 0".
        - macro: kube_controller_consider_syscalls
          condition: (evt.num < 0)

        # These policies are limited to containers, specifically those where
        # the container image name starts with "kube_controller"
        - macro: app_kube_controller
          condition: container and container.image contains "kube-controller"

        # Not considering all inbound networking suspect

        # Not considering all outbound networking suspect

        # Restricting listening ports to selected set

        - list: kube_controller_allowed_inbound_ports_tcp
          items: [10252]

        - rule: Unexpected inbound tcp connection kube_controller
          desc: Detect inbound traffic to kube_controller using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_controller_allowed_inbound_ports_tcp) and app_kube_controller
          output: Inbound network connection to kube_controller on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting spawned processes to selected set

        - list: kube_controller_allowed_processes
          items: ["kube-controller-manager"]

        - rule: Unexpected spawned process kube_controller
          desc: Detect a process started in a kube_controller container outside of an expected set
          condition: spawned_process and not proc.name in (kube_controller_allowed_processes) and app_kube_controller
          output: Unexpected process spawned in kube_controller container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting files read or written to specific set
        #
        # Auto-generated set of falco rules for kube_dashboard containers
        # Generated at 2018-05-23 09:58:49 UTC
        #

        # By default, the autogenerated rules include rules that attempt to
        # restrict the set of system calls that can be performed by
        # applications. However, we know that these rules are fairly FP-prone,
        # so they are disabled by default. If you'd like to enable them,
        # either change or override this macro's condition to "evt.num >= 0".
        - macro: kube_dashboard_consider_syscalls
          condition: (evt.num < 0)

        # These policies are limited to containers, specifically those where
        # the container image name starts with "kube_dashboard"
        - macro: app_kube_dashboard
          condition: container and container.image contains "kube-dashboard"

        # Not considering all inbound networking suspect

        # Not considering all outbound networking suspect

        # Restricting listening ports to selected set

        - list: kube_dashboard_allowed_inbound_ports_tcp
          items: [8443]

        - rule: Unexpected inbound tcp connection kube_dashboard
          desc: Detect inbound traffic to kube_dashboard using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_dashboard_allowed_inbound_ports_tcp) and app_kube_dashboard
          output: Inbound network connection to kube_dashboard on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting spawned processes to selected set

        - list: kube_dashboard_allowed_processes
          items: ["/dashboard"]

        - rule: Unexpected spawned process kube_dashboard
          desc: Detect a process started in a kube_dashboard container outside of an expected set
          condition: spawned_process and not proc.name in (kube_dashboard_allowed_processes) and app_kube_dashboard
          output: Unexpected process spawned in kube_dashboard container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting files read or written to specific set

        - list: kube_dashboard_allowed_file_prefixes_readonly
          items: ["/public"]

        - rule: Unexpected file access readonly for kube_dashboard
          desc: Detect an attempt to access a file readonly other than below an expected list of directories
          condition: (open_read and evt.is_open_write=false) and not fd.name pmatch (kube_dashboard_allowed_file_prefixes_readonly) and app_kube_dashboard
          output: Unexpected file accessed readonly for kube_dashboard (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
          priority: NOTICE
        #
        # Auto-generated set of falco rules for kube_dns containers
        # Generated at 2018-05-23 08:29:54 UTC
        #

        # By default, the autogenerated rules include rules that attempt to
        # restrict the set of system calls that can be performed by
        # applications. However, we know that these rules are fairly FP-prone,
        # so they are disabled by default. If you'd like to enable them,
        # either change or override this macro's condition to "evt.num >= 0".
        - macro: kube_dns_consider_syscalls
          condition: (evt.num < 0)

        # These policies are limited to containers, specifically those where
        # the container image name starts with "kube_dns"
        - macro: app_kube_dns
          condition: container and container.image contains "kube-dns"

        # Not considering all inbound networking suspect

        # Not considering all outbound networking suspect

        # Restricting listening ports to selected set

        - list: kube_dns_allowed_inbound_ports_tcp
          items: [10053, 10055, 8081]

        - rule: Unexpected inbound tcp connection kube_dns
          desc: Detect inbound traffic to kube_dns using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_dns_allowed_inbound_ports_tcp) and app_kube_dns
          output: Inbound network connection to kube_dns on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting spawned processes to selected set

        - list: kube_dns_allowed_processes
          items: ["/kube-dns"]

        - rule: Unexpected spawned process kube_dns
          desc: Detect a process started in a kube_dns container outside of an expected set
          condition: spawned_process and not proc.name in (kube_dns_allowed_processes) and app_kube_dns
          output: Unexpected process spawned in kube_dns container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE
        #
        # Auto-generated set of falco rules for kube_scheduler containers
        # Generated at 2018-05-23 09:58:49 UTC
        #

        # By default, the autogenerated rules include rules that attempt to
        # restrict the set of system calls that can be performed by
        # applications. However, we know that these rules are fairly FP-prone,
        # so they are disabled by default. If you'd like to enable them,
        # either change or override this macro's condition to "evt.num >= 0".
        - macro: kube_scheduler_consider_syscalls
          condition: (evt.num < 0)

        # These policies are limited to containers, specifically those where
        # the container image name starts with "kube_scheduler"
        - macro: app_kube_scheduler
          condition: container and container.image contains "kube-scheduler"

        # Not considering all inbound networking suspect

        # Not considering all outbound networking suspect

        # Restricting listening ports to selected set

        - list: kube_scheduler_allowed_inbound_ports_tcp
          items: [10251]

        - rule: Unexpected inbound tcp connection kube_scheduler
          desc: Detect inbound traffic to kube_scheduler using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (kube_scheduler_allowed_inbound_ports_tcp) and app_kube_scheduler
          output: Inbound network connection to kube_scheduler on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting spawned processes to selected set

        - list: kube_scheduler_allowed_processes
          items: ["kube-scheduler"]

        - rule: Unexpected spawned process kube_scheduler
          desc: Detect a process started in a kube_scheduler container outside of an expected set
          condition: spawned_process and not proc.name in (kube_scheduler_allowed_processes) and app_kube_scheduler
          output: Unexpected process spawned in kube_scheduler container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting files read or written to specific set

        # Restricting syscalls to selected set

        - list: kube_scheduler_allowed_syscalls
          items: [accept]

        - rule: Unexpected syscall kube_scheduler
          desc: Detect a syscall in a kube_scheduler container outside of an expected set
          condition: kube_scheduler_consider_syscalls and not evt.type in ("<unknown>", kube_scheduler_allowed_syscalls) and app_kube_scheduler
          output: Unexpected syscall in kube_scheduler container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)
          priority: NOTICE
          warn_evttypes: False
      rules-nginx.yaml: |
        - macro: nginx_consider_syscalls
          condition: (evt.num < 0)

        - macro: app_nginx
          condition: container and container.image contains "nginx"

        # Any outbound traffic raises a WARNING

        - rule: Unauthorized process opened an outbound connection (nginx)
          desc: A nginx process tried to open an outbound connection and is not whitelisted
          condition: outbound and evt.rawres >= 0 and app_nginx
          output: Non-whitelisted process opened an outbound connection (command=%proc.cmdline
            connection=%fd.name)
          priority: WARNING


        # Restricting listening ports to selected set

        - list: nginx_allowed_inbound_ports_tcp
          items: [80, 443, 8080, 8443]

        - rule: Unexpected inbound tcp connection nginx
          desc: Detect inbound traffic to nginx using tcp on a port outside of expected set
          condition: inbound and evt.rawres >= 0 and not fd.sport in (nginx_allowed_inbound_ports_tcp) and app_nginx
          output: Inbound network connection to nginx on unexpected port (command=%proc.cmdline pid=%proc.pid connection=%fd.name sport=%fd.sport user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting spawned processes to selected set

        - list: nginx_allowed_processes
          items: ["nginx", "app-entrypoint.", "basename", "dirname", "grep", "nami", "node", "tini"]

        - rule: Unexpected spawned process nginx
          desc: Detect a process started in a nginx container outside of an expected set
          condition: spawned_process and not proc.name in (nginx_allowed_processes) and app_nginx
          output: Unexpected process spawned in nginx container (command=%proc.cmdline pid=%proc.pid user=%user.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting files read or written to specific set

        - list: nginx_allowed_file_prefixes_readwrite
          items: ["/var/log/nginx", "/var/run"]
        # Remember to add your nginx cache path

        - rule: Unexpected file access readwrite for nginx
          desc: Detect an attempt to access a file readwrite other than below an expected list of directories
          condition: (open_write) and not fd.name pmatch (nginx_allowed_file_prefixes_readwrite) and app_nginx
          output: Unexpected file accessed readwrite for nginx (command=%proc.cmdline pid=%proc.pid file=%fd.name %container.info image=%container.image)
          priority: NOTICE

        # Restricting syscalls to selected set

        - list: nginx_allowed_syscalls
          items: [accept, bind, clone, connect, dup, listen, mkdir, open, recvfrom, recvmsg, sendto, setgid, setuid, socket, socketpair]

        - rule: Unexpected syscall nginx
          desc: Detect a syscall in a nginx container outside of an expected set
          condition: nginx_consider_syscalls and not evt.type in ("<unknown>", nginx_allowed_syscalls) and app_nginx
          output: Unexpected syscall in nginx container (command=%proc.cmdline pid=%proc.pid user=%user.name syscall=%evt.type args=%evt.args %container.info image=%container.image)
          priority: NOTICE
          warn_evttypes: False

