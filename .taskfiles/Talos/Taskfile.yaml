---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

x-vars: &vars
  KUBERNETES_VERSION:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.KUBERNETES_VERSION' {{.CLUSTER_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
  TALOS_CONTROLLER:
    sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
  TALOS_SCHEMATIC_ID:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.TALOS_SCHEMATIC_ID' {{.CLUSTER_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml
  TALOS_VERSION:
    sh: yq 'select(document_index == 1).spec.postBuild.substitute.TALOS_VERSION' {{.CLUSTER_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml

vars:
  HOME_SERVICE_ADDR: 10.10.10.75 # Ref: https://github.com/coolguy1771/home-service
  HOME_SERVICE_USER: twitlin
  HOME_SERVICE_MATCHBOX_DIR: /var/opt/home-service/apps/matchbox/data/config
  MINIJINJA_CMD: '{{.ROOT_DIR}}/.bin/minijinja --env --trim-blocks --lstrip-blocks --autoescape=none'

tasks:

  apply-config:
    desc: Apply Talos configuration to a node
    cmd: |
      sops exec-file {{.CLUSTER_DIR}}/bootstrap/talos/assets/{{.HOSTNAME}}.secret.sops.yaml "{{.MINIJINJA_CMD}} {}" | \
          talosctl apply-config --mode={{.MODE}} --nodes {{.HOSTNAME}} --file /dev/stdin
    vars:
      MODE: '{{.MODE | default "no-reboot"}}'
    env: *vars
    requires:
      vars: ['CLUSTER', 'HOSTNAME']
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - test -f {{.CLUSTER_DIR}}/bootstrap/talos/assets/{{.HOSTNAME}}.secret.sops.yaml
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null

  upgrade:
    desc: Upgrade Talos on a node
    cmds:
      - until kubectl wait --timeout=5m --for=condition=Complete jobs --all --all-namespaces; do sleep 10; done
      - talosctl --nodes {{.HOSTNAME}} upgrade --image="factory.talos.dev/installer/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}" --timeout=10m
      - talosctl --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
      - until kubectl wait --timeout=5m --for=jsonpath=.status.ceph.health=HEALTH_OK cephcluster --all --all-namespaces; do sleep 10; done
    vars: *vars
    requires:
      vars: ['CLUSTER', 'HOSTNAME']
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null

  upgrade-k8s:
    desc: Upgrade Kubernetes
    cmds:
      - until kubectl wait --timeout=5m --for=condition=Complete jobs --all --all-namespaces; do sleep 10; done
      - talosctl --nodes {{.TALOS_CONTROLLER}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    vars: *vars
    requires:
      vars: ['CLUSTER']
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.TALOS_CONTROLLER}} get machineconfig &>/dev/null

  reset-node:
    desc: Reset a Talos node and shut it down
    prompt: Reset Talos '{{.HOSTNAME}}' node on the '{{.CLUSTER}}' cluster ... continue?
    cmd: talosctl reset --nodes {{.HOSTNAME}} --graceful=false
    requires:
      vars: ['CLUSTER', 'HOSTNAME']
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null

  reset-cluster:
    desc: Reset all the Talos nodes and shut 'em down
    prompt: Reset Talos on the '{{.CLUSTER}}' cluster ... continue?
    cmd: talosctl reset --nodes {{.NODES}} --graceful=false
    vars:
      NODES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    requires:
      vars: ['CLUSTER']
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - talosctl config info &>/dev/null
      - talosctl --nodes {{.NODES}} get machineconfig &>/dev/null

  bootstrap-matchbox:
    desc: Bootstrap required Matchbox configuration to PXE Boot machine
    cmds:
      - for: ['kernel-amd64', 'initramfs-amd64.xz']
        cmd: |
          curl -skL https://factory.talos.dev/image/{{.TALOS_SCHEMATIC_ID}}/{{.TALOS_VERSION}}/{{.ITEM}} | \
              curl -skT - -u "{{.HOME_SERVICE_USER}}:" \
                  sftp://{{.HOME_SERVICE_ADDR}}/{{.HOME_SERVICE_MATCHBOX_DIR}}/assets/{{.ITEM}}
      - find {{.CLUSTER_DIR}}/bootstrap/talos/assets -type f | xargs -I{} sh -c "sops --decrypt {} | {{.MINIJINJA_CMD}} - | curl -skT - -u "{{.HOME_SERVICE_USER}}:" sftp://{{.HOME_SERVICE_ADDR}}/{{.HOME_SERVICE_MATCHBOX_DIR}}/assets/\$(basename {} | sed 's/\.secret\.sops//')"
      - find {{.CLUSTER_DIR}}/bootstrap/talos/groups -type f | xargs -I{} curl -skT {} -u "{{.HOME_SERVICE_USER}}:" sftp://{{.HOME_SERVICE_ADDR}}/{{.HOME_SERVICE_MATCHBOX_DIR}}/groups/
      - find {{.CLUSTER_DIR}}/bootstrap/talos/profiles -type f | xargs -I{} curl -skT {} -u "{{.HOME_SERVICE_USER}}:" sftp://{{.HOME_SERVICE_ADDR}}/{{.HOME_SERVICE_MATCHBOX_DIR}}/profiles/
      - ssh -l {{.HOME_SERVICE_USER}} {{.HOME_SERVICE_ADDR}} "cd /var/opt/home-service ; go-task restart-matchbox"
    vars: *vars
    requires:
      vars: ['CLUSTER']
    preconditions:
      - ping -c1 {{.HOME_SERVICE_ADDR}}
