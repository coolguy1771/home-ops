---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app neuvector-core
spec:
  interval: 30m
  chart:
    spec:
      chart: core
      version: 2.7.8
      sourceRef:
        kind: HelmRepository
        name: neuvector
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    crdwebhook:
      enabled: false
    rbac: true # required for rancher authentication
    serviceAccount: neuvector
    leastPrivilege: true
    autoGenerateCert: true
    defaultValidityPeriod: 365
    internal:
      certmanager:
        enabled: true
        secretname: neuvector-internal
    controller:
      # If false, controller will not be installed
      enabled: true
      replicas: 3
      env: []
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - neuvector-controller-pod
                topologyKey: "kubernetes.io/hostname"
      tolerations: []
      topologySpreadConstraints: []
      apisvc:
        type: ClusterIP
        annotations: {}
        # OpenShift Route configuration
        # Controller supports HTTPS only, so edge termination not supported
      pvc:
        enabled: true
        existingClaim: false
        accessModes:
          - ReadWriteMany
        storageClass: ceph-filesystem
        capacity: 30G
      internal:
        certificate:
          secret: "neuvector-internal"
          keyFile: tls.key
          pemFile: tls.crt
          caFile: ca.crt # must be the same CA for all internal.
      federation:
        mastersvc:
          type: ClusterIP
          ingress:
            enabled: true
            host: master.federation.neuvector.${SECRET_PUBLIC_DOMAIN}
            ingressClassName: "internal"
            path: "/"
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
              cert-manager.io/cluster-issuer: letsencrypt-production
              # ingress.kubernetes.io/rewrite-target: /
            tls: true
            secretName:  master-federation-neuvector-tls
        managedsvc:
          type: ClusterIP
          # Federation Managed Ingress
          ingress:
            enabled: true
            host: managed.federation.neuvector.${SECRET_PUBLIC_DOMAIN}
            ingressClassName: "internal"
            path: "/"
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
              cert-manager.io/cluster-issuer: letsencrypt-production
              # ingress.kubernetes.io/rewrite-target: /
            tls: true
            secretName: managed-federation-neuvector-tls
          annotations: {}
      ingress:
        enabled: true
        host: api.neuvector.${SECRET_PUBLIC_DOMAIN} # MUST be set, if ingress is enabled
        ingressClassName: "internal"
        path: "/" # or this could be "/api", but might need "rewrite-target" annotation
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          external-dns.alpha.kubernetes.io/target: external.${SECRET_PUBLIC_DOMAIN}
          cert-manager.io/cluster-issuer: letsencrypt-production
          # ingress.kubernetes.io/rewrite-target: /
        tls: true
        secretName: api-neuvector-tls
      resources:
        limits:
          cpu: 400m
          memory: 2792Mi
        requests:
          cpu: 100m
          memory: 2280Mi
      configmap:
        enabled: false
        data:
          # passwordprofileinitcfg.yaml: |
          #  ...
          # roleinitcfg.yaml: |
          #  ...
          # ldapinitcfg.yaml: |
          #  ...
          # oidcinitcfg.yaml: |
          # ...
          # samlinitcfg.yaml: |
          # ...
          # sysinitcfg.yaml: |
          # ...
          # userinitcfg.yaml: |
          # ...
          # fedinitcfg.yaml: |
          # ...
      secret:
        # NOTE: files defined here have preferrence over the ones defined in the configmap section
        enabled: false
        data:
          # passwordprofileinitcfg.yaml:
          #  ...
          # roleinitcfg.yaml:
          #  ...
          # ldapinitcfg.yaml:
          #   directory: OpenLDAP
          #   ...
          # oidcinitcfg.yaml:
          #   Issuer: https://...
          #   ...
          # samlinitcfg.yaml:
          #   ...
          # sysinitcfg.yaml:
          #   ...
          userinitcfg.yaml:
            users:
            - Fullname: admin
              Password:
              Role: admin

    enforcer:
      # If false, enforcer will not be installed
      enabled: true
      image:
        repository: neuvector/enforcer
        hash:
      updateStrategy:
        type: RollingUpdate
      priorityClassName:
      podLabels: {}
      podAnnotations: {}
      env: []
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      resources:
        limits:
          cpu: 400m
          memory: 2792Mi
        requests:
          cpu: 100m
          memory: 2280Mi
      internal: # this is used for internal communication. Please use the SAME CA for all the components (controller, scanner, adapter and enforcer)
        certificate:
          secret: "neuvector-internal"
          keyFile: tls.key
          pemFile: tls.crt
          caFile: ca.crt # must be the same CA for all internal.

    manager:
      # If false, manager will not be installed
      enabled: true
      image:
        repository: neuvector/manager
        hash:
      priorityClassName:
      env:
        ssl: true
        envs: []
      #      - name: CUSTOM_PAGE_HEADER_COLOR
      #        value: "#FFFFFF"
      #      - name: CUSTOM_PAGE_FOOTER_COLOR
      #        value: "#FFFFFF"
      svc:
        type: ClusterIP # should be set to - ClusterIP
      certificate:
        secret: ""
        keyFile: tls.key
        pemFile: tls.pem
      ingress:
        enabled: true
        host: neuvector.${SECRET_PUBLIC_DOMAIN}
        ingressClassName: "external"
        path: "/"
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          external-dns.alpha.kubernetes.io/target: external.${SECRET_PUBLIC_DOMAIN}
          cert-manager.io/cluster-issuer: letsencrypt-production
          # kubernetes.io/ingress.class: my-nginx
          # nginx.ingress.kubernetes.io/whitelist-source-range: "1.1.1.1"
          # nginx.ingress.kubernetes.io/rewrite-target: /
          # nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
          # only for end-to-end tls conf - ingress-nginx accepts backend self-signed cert
        tls: true
        secretName: neuvector-tls # my-tls-secret
      resources:
        limits:
          cpu: 400m
          memory: 2792Mi
        requests:
          cpu: 100m
          memory: 2280Mi
      topologySpreadConstraints: []
      affinity: {}

    cve:
      adapter:
        enabled: true
        resources:
          limits:
            cpu: 400m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 1024Mi
        affinity: {}
        certificate:
          secret: ""
          keyFile: tls.key
          pemFile: tls.crt
        harbor:
          protocol: https
          secretName:
        svc:
          type: ClusterIP
        route:
          enabled: false
        ingress:
          enabled: true
          host: adaptor.neuvector.${SECRET_PUBLIC_DOMAIN}
          ingressClassName: "internal"
          path: "/"
          annotations:
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
            cert-manager.io/cluster-issuer: letsencrypt-production
            # kubernetes.io/ingress.class: my-nginx
            # nginx.ingress.kubernetes.io/whitelist-source-range: "1.1.1.1"
            # nginx.ingress.kubernetes.io/rewrite-target: /
            # nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
            # only for end-to-end tls conf - ingress-nginx accepts backend self-signed cert
          tls: true
          secretName: adaptor-neuvector-tls # my-tls-secret
        internal: # this is used for internal communication. Please use the SAME CA for all the components (controller, scanner, adapter and enforcer)
          certificate:
            secret: "neuvector-internal"
            keyFile: tls.key
            pemFile: tls.crt
            caFile: ca.crt # must be the same CA for all internal.
      updater:
        enabled: true
        secure: true
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
      scanner:
        enabled: true
        replicas: 3
        resources:
          limits:
            cpu: 400m
            memory: 2792Mi
          requests:
            cpu: 100m
            memory: 2280Mi
        topologySpreadConstraints: []
        affinity: {}
        runAsUser: # MUST be set for Rancher hardened cluster
        internal: # this is used for internal communication. Please use the SAME CA for all the components (controller, scanner, adapter and enforcer)
          certificate:
            secret: "neuvector-internal"
            keyFile: tls.key
            pemFile: tls.crt
            caFile: ca.crt # must be the same CA for all internal.
    resources:
      limits:
        cpu: 400m
        memory: 2792Mi
      requests:
        cpu: 100m
        memory: 2280Mi
