---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: vault
spec:
  interval: 30m
  chart:
    spec:
      chart: vault
      version: 0.27.0
      sourceRef:
        kind: HelmRepository
        name: hashicorp
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    global:
      enabled: true
      # TLS for end-to-end encrypted transport
      tlsDisable: false
      serverTelemetry:
        # Enable integration with the Prometheus Operator
        # See the top level serverTelemetry section below before enabling this feature.
        prometheusOperator: true
    injector:
      replicas: 1
      leaderElector:
        enabled: true
      metrics:
        enabled: true
      logLevel: "info"
      logFormat: "json"
      revokeOnShutdown: true
      webhook:
        failurePolicy: Ignore
        matchPolicy: Exact
        timeoutSeconds: 30
      failurePolicy: Ignore
      resources:
        requests:
          memory: 256Mi
          cpu: 250m
        limits:
          memory: 256Mi
          cpu: 250m
    server:
      updateStrategyType: "OnDelete"
      logLevel: "info"
      logFormat: "json"
      # Ingress allows ingress services to be created to allow external access
      # from Kubernetes to access Vault pods.
      # If deployment is on OpenShift, the following block is ignored.
      # In order to expose the service, use the route section below
      ingress:
        enabled: true
        labels: {}
          # traffic: external
        annotations:
          cert-manager.io/cluster-issuer: "vault-issuer"
          cert-manager.io/common-name: "vault.286k.co"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"

        # Optionally use ingressClassName instead of deprecated annotation.
        # See: https://kubernetes.io/docs/concepts/services-networking/ingress/#deprecated-annotation
        ingressClassName: "internal"

        # As of Kubernetes 1.19, all Ingress Paths must have a pathType configured. The default value below should be sufficient in most cases.
        # See: https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types for other possible values.
        pathType: Prefix

        # When HA mode is enabled and K8s service registration is being used,
        # configure the ingress to point to the Vault active service.
        activeService: true
        hosts:
          - host: vault.286k.co
            paths: []
        ## Extra paths to prepend to the host configuration. This is useful when working with annotation based services.
        extraPaths: []
        # - path: /*
        #   backend:
        #     service:
        #       name: ssl-redirect
        #       port:
        #         number: use-annotation
        tls:
          - secretName: vault-tls
            hosts:
              - vault.286k.co
      readinessProbe:
        enabled: true
        path: "/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204"
      livenessProbe:
        enabled: true
        path: "/v1/sys/health?standbyok=true"
        initialDelaySeconds: 60
      extraEnvironmentVars:
        VAULT_CACERT: /vault/userconfig/tls-server/ca.crt
      extraVolumes:
        - type: secret
          name: tls-server
        # - type: secret
        #   name: tls-ca
      #   - type: secret
      #     name: kms-creds
      # authDelegator enables a cluster role binding to be attached to the service
      # account.  This cluster role binding can be used to setup Kubernetes auth
      # method.  https://www.vaultproject.io/docs/auth/kubernetes.html
      authDelegator:
        enabled: true

      # extraArgs is a string containing additional Vault server arguments.
      extraArgs: ""

      # extraPorts is a list of extra ports. Specified as a YAML list.
      # This is useful if you need to add additional ports to the statefulset in dynamic way.
      extraPorts: null
        # - containerPort: 8300
        #   name: http-monitoring

      # extraEnvironmentVars is a list of extra environment variables to set with the stateful set. These could be
      # used to include variables required for auto-unseal.
      # extraEnvironmentVars: {}
      #   # GOOGLE_REGION: global
      #   # GOOGLE_PROJECT: myproject
      #   # GOOGLE_APPLICATION_CREDENTIALS: /vault/userconfig/myproject/myproject-creds.json

      # extraSecretEnvironmentVars is a list of extra environment variables to set with the stateful set.
      # These variables take value from existing Secret objects.
      extraSecretEnvironmentVars:
        - envName: AWS_SECRET_ACCESS_KEY
          secretName: vault-secret
          secretKey: AWS_SECRET_ACCESS_KEY
        - envName: AWS_ACCESS_KEY_ID
          secretName: vault-secret
          secretKey: AWS_ACCESS_KEY_ID
        - envName: VAULT_AWSKMS_SEAL_KEY_ID
          secretName: vault-secret
          secretKey: VAULT_AWSKMS_SEAL_KEY_ID

      # Deprecated: please use 'volumes' instead.
      # extraVolumes is a list of extra volumes to mount. These will be exposed
      # to Vault in the path `/vault/userconfig/<name>/`. The value below is
      # an array of objects, examples are shown below.
      # extraVolumes: []
      #   # - type: secret (or "configMap")
      #   #   name: my-secret
      #   #   path: null # default is `/vault/userconfig`
      # Toleration Settings for server pods
      # This should be either a multi-line string or YAML matching the Toleration array
      # in a PodSpec.
      tolerations: []

      # Enables network policy for server pods
      networkPolicy:
        enabled: false
        egress: []
        # egress:
        # - to:
        #   - ipBlock:
        #       cidr: 10.0.0.0/24
        #   ports:
        #   - protocol: TCP
        #     port: 443

      # Enables a headless service to be used by the Vault Statefulset
      service:
        enabled: true
        # Enable or disable the vault-active service, which selects Vault pods that
        # have labelled themselves as the cluster leader with `vault-active: "true"`
        active:
          enabled: true
        # Enable or disable the vault-standby service, which selects Vault pods that
        # have labelled themselves as a cluster follower with `vault-active: "false"`
        standby:
          enabled: true
        # If enabled, the service selectors will include `app.kubernetes.io/instance: {{ .Release.Name }}`
        # When disabled, services may select Vault pods not deployed from the chart.
        # Does not affect the headless vault-internal service with `ClusterIP: None`
        instanceSelector:
          enabled: true
      # This configures the Vault Statefulset to create a PVC for data
      # storage when using the file or raft backend storage engines.
      # See https://www.vaultproject.io/docs/configuration/storage/index.html to know more
      dataStorage:
        enabled: true
        size: 10Gi
        mountPath: "/vault/data"
        storageClass: ceph-rbd
      # This configures the Vault Statefulset to create a PVC for audit
      # logs.  Once Vault is deployed, initialized, and unsealed, Vault must
      # be configured to use this for audit logs.  This will be mounted to
      # /vault/audit
      # See https://www.vaultproject.io/docs/audit/index.html to know more
      auditStorage:
        enabled: true
        size: 10Gi
        # Location where the PVC will be mounted.
        mountPath: "/vault/audit"
        storageClass: ceph-rbd
      ha:
        enabled: true
        replicas: 1
        raft:
          # Enables Raft integrated storage
          enabled: true
          # Set the Node Raft ID to the name of the pod
          setNodeId: true
          config: |
            ui = true

            listener "tcp" {
              address = "[::]:8200"
              cluster_address = "[::]:8201"
              tls_cert_file = "/vault/userconfig/tls-server/tls-combined.pem"
              tls_key_file = "/vault/userconfig/tls-server/tls.key"
              # tls_client_ca_file = "/vault/tls-server/client-auth-ca.pem"
              # Enable unauthenticated metrics access (necessary for Prometheus Operator)
              telemetry {
                unauthenticated_metrics_access = "true"
              }
            }
            seal "awskms" {
              region     = "us-east-1"
            }
            storage "raft" {
              path = "/vault/data"
                retry_join {
                leader_api_addr = "https://vault-0.vault-internal:8200"
                leader_ca_cert_file = "/vault/userconfig/tls-server/ca.crt"
                leader_client_cert_file = "/vault/userconfig/tls-server/tls.crt"
                leader_client_key_file = "/vault/userconfig/tls-server/tls.key"
              }
            }
            service_registration "kubernetes" {}

    # Vault UI
    ui:
      # True if you want to create a Service entry for the Vault UI.
      #
      # serviceType can be used to control the type of service created. For
      # example, setting this to "LoadBalancer" will create an external load
      # balancer (for supported K8S installations) to access the UI.
      enabled: true
      publishNotReadyAddresses: true
      # The service should only contain selectors for active Vault pod
      activeVaultPodOnly: true
      serviceType: "ClusterIP"
      serviceNodePort: null
      externalPort: 8200
      targetPort: 8200

    # secrets-store-csi-driver-provider-vault
    csi:
      enabled: true

      image:
        repository: "hashicorp/vault-csi-provider"
        tag: "1.4.1"
        pullPolicy: IfNotPresent

      # volumes is a list of volumes made available to all containers. These are rendered
      # via toYaml rather than pre-processed like the extraVolumes value.
      # The purpose is to make it easy to share volumes between containers.
      volumes: null
      # - name: tls
      #   secret:
      #     secretName: vault-tls

      # volumeMounts is a list of volumeMounts for the main server container. These are rendered
      # via toYaml rather than pre-processed like the extraVolumes value.
      # The purpose is to make it easy to share volumes between containers.
      volumeMounts: null
      # - name: tls
      #   mountPath: "/vault/tls"
      #   readOnly: true
      agent:
        enabled: true
        image:
          repository: "hashicorp/vault"
          tag: "1.15.4"
          pullPolicy: IfNotPresent
        logFormat: json
        logLevel: info
    # Vault is able to collect and publish various runtime metrics.
    # Enabling this feature requires setting adding `telemetry{}` stanza to
    # the Vault configuration. There are a few examples included in the `config` sections above.
    #
    # For more information see:
    # https://www.vaultproject.io/docs/configuration/telemetry
    # https://www.vaultproject.io/docs/internals/telemetry
    serverTelemetry:
      # Enable support for the Prometheus Operator. Currently, this chart does not support
      serviceMonitor:
        # Enable deployment of the Vault Server ServiceMonitor CustomResource.
        enabled: true
      prometheusRules:
          enabled: true
          # Some example rules.
          rules:
            - alert: vault-HighResponseTime
              annotations:
                message: The response time of Vault is over 500ms on average over the last 5 minutes.
              expr: vault_core_handle_request{quantile="0.5", namespace="vault-system"} > 500
              for: 5m
              labels:
                severity: warning
            - alert: vault-HighResponseTime
              annotations:
                message: The response time of Vault is over 1s on average over the last 5 minutes.
              expr: vault_core_handle_request{quantile="0.5", namespace="vault-system"} > 1000
              for: 5m
              labels:
                severity: critical
