---
# yaml-language-server: $schema=https://kubernetes-schemas.devbu.io/helm.toolkit.fluxcd.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app cilium
  namespace: kube-system
spec:
  interval: 15m
  chart:
    spec:
      chart: *app
      version: 1.14.3
      sourceRef:
        kind: HelmRepository
        name: cilium
        namespace: flux-system
  install:
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    securityContext:
      privileged: true
      capabilities:
        ciliumAgent:
          - PERFMON
          - BPF
          - CHOWN
          - KILL
          - NET_ADMIN
          - NET_RAW
          - IPC_LOCK
          - SYS_ADMIN
          - SYS_RESOURCE
          - DAC_OVERRIDE
          - FOWNER
          - SETGID
          - SETUI
        cleanCiliumState:
          - NET_ADMIN
          - SYS_ADMIN
          - SYS_RESOURCE
    autoDirectNodeRoutes: true
    annotateK8sNode: true
    cluster:
      id: 1
      name: home
    bandwidthManager:
      # -- Enable bandwidth manager infrastructure (also prerequirement for BBR)
      enabled: true
      # -- Activate BBR TCP congestion control for Pods
      bbr: true
    pmtuDiscovery:
      enabled: true
    bpf:
      clockProbe: true
      lbExternalClusterIP: true
      masquerade: true
      tproxy: true
    containerRuntime:
      integration: containerd
    endpointRoutes:
      enabled: true
    nodePort:
      enabled: true
    enableCiliumEndpointSlice: true
    enableK8sEndpointSlice: true
    enableIdentityMark: true
    ingressController:
      enabled: true
      loadbalancerMode: dedicated
      defaultSecretName: "${SECRET_PUBLIC_DOMAIN/./-}-tls"
      defaultSecretNamespace: networking
    gatewayAPI:
      enabled: true
    bgpControlPlane:
      enabled: true
    l2announcements:
      enabled: false
      leaseDuration: 120s
      leaseRenewDeadline: 60s
      leaseRetryPeriod: 1s
    hubble:
      enabled: true
      metrics:
        enabled:
          - dns:query;ignoreAAAA
          - drop
          - tcp
          - port-distribution
          - icmp
          - "flow:sourceContext=workload-name|reserved-identity;destinationContext=workload-name|reserved-identity"
          - "httpV2:exemplars=true;labelsContext=source_ip,source_namespace,source_workload,destination_ip,destination_namespace,destination_workload,traffic_direction;sourceContext=workload-name|reserved-identity;destinationContext=workload-name|reserved-identity"
        serviceMonitor:
          enabled: true
        enableOpenMetrics: true
        dashboards:
          enabled: true
          labelValue: "true"
          annotations:
            grafana_folder: Cilium
      tls:
        enabled: true
        auto:
          enabled: true
          method: helm
      relay:
        enabled: true
        rollOutPods: true
        replicas: 2
      prometheus:
        enabled: true
        serviceMonitor:
          enabled: true
          trustCRDsExist: true
      ui:
        enabled: true
        rollOutPods: true
        replicas: 2
        backend:
          image:
            repository: "quay.io/cilium/hubble-ui-backend"
            tag: v0.12.1
        frontend:
          image:
            repository: "quay.io/cilium/hubble-ui"
            tag: "v0.12.1"
        ingress:
          enabled: true
          annotations:
            kubernetes.io/ingress.class: cilium
            cert-manager.io/cluster-issuer: letsencrypt-production
          ingressClassName: cilium
          hosts:
            - &host hubble.${SECRET_PUBLIC_DOMAIN}
          tls:
            - secretName: hubble-tls
              hosts:
                - *host
    rollOutCiliumPods: true
    externalIPs:
      enabled: true
    hostFirewall:
      enabled: true
    hostPort:
      enabled: true
    socketLB:
      enabled: true
    wellKnownIdentities:
      enabled: true
    enableCnpStatusUpdates: true
    endpointStatus:
      enabled: true
      status: "policy"
    ipam:
      mode: kubernetes
    ipv4NativeRoutingCIDR: "10.96.0.0/12"
    monitor:
      enabled: false
    prometheus:
      enabled: true
      serviceMonitor:
        enabled: true
    tunnel: disabled
    operator:
      enabled: true
      rollOutPods: true
      replicas: 2
      prometheus:
        enabled: true
        serviceMonitor:
          enabled: true
    loadBalancer:
      algorithm: maglev
      mode: dsr
      serviceTopology: true
    l7Proxy: true
    localRedirectPolicy: true
    kubeProxyReplacementHealthzBindAddr: 0.0.0.0:10256
    k8sServiceHost: localhost
    k8sServicePort: 7445
    kubeProxyReplacement: true
    logOptions:
      format: json
    cgroup:
      hostRooot: /sys/fs/cgroup
      autoMount:
        enabled: false
    envoyConfig:
      # -- Enable CiliumEnvoyConfig CRD
      # CiliumEnvoyConfig CRD can also be implicitly enabled by other options.
      enabled: true
    envoy:
      enabled: true
      rollOutPods: true
      securityContext:
        # -- User to run the pod with
        # runAsUser: 0
        # -- Run the pod with elevated privileges
        privileged: true
        prometheus:
          enabled: true
          serviceMonitor:
            enabled: true
        capabilities:
          # -- Capabilities for the `cilium-envoy` container
          envoy:
            # Used since cilium proxy uses setting IPPROTO_IP/IP_TRANSPARENT
            - NET_ADMIN
            - PERFMON
            - BPF
    # Configuration for types of authentication for Cilium (beta)
    authentication:
      # -- Enable authentication processing and garbage collection.
      # Note that if disabled, policy enforcement will still block requests that require authentication.
      # But the resulting authentication requests for these requests will not be processed, therefore the requests not be allowed.
      enabled: true
      # -- Buffer size of the channel Cilium uses to receive authentication events from the signal map.
      queueSize: 1024
      # -- Buffer size of the channel Cilium uses to receive certificate expiration events from auth handlers.
      rotatedIdentitiesQueueSize: 1024
        # -- Interval for garbage collection of auth map entries.
      gcInterval: "5m0s"
      # Configuration for Cilium's service-to-service mutual authentication using TLS handshakes.
      # Note that this is not full mTLS support without also enabling encryption of some form.
      # Current encryption options are Wireguard or IPSec, configured in encryption block above.
      mutual:
        # -- Port on the agent where mutual authentication handshakes between agents will be performed
        port: 4250
        # -- Timeout for connecting to the remote node TCP socket
        connectTimeout: 5s
        # Settings for SPIRE
        spire:
          # -- Enable SPIRE integration (beta)
          enabled: false
          # Settings to control the SPIRE installation and configuration
          install:
            # -- Enable SPIRE installation.
            # This will only take effect only if authentication.mutual.spire.enabled is true
            enabled: true
            # -- SPIRE namespace to install into
            namespace: spire-system
            # SPIRE agent configuration
            agent:
              # -- SPIRE agent image
              image: ghcr.io/spiffe/spire-agent:1.8.1@sha256:93561a73a0979f849f20d32a31611e0bcfc7013ce7270cd9c554095dfd1e154e
              # -- SPIRE agent service account
              serviceAccount:
                create: true
                name: spire-agent
              # -- SPIRE agent annotations
              annotations: { }
              # -- SPIRE agent labels
              labels: { }
              # -- SPIRE Workload Attestor kubelet verification.
              skipKubeletVerification: true
              # -- SPIRE agent tolerations configuration
              # ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
              tolerations: []
            server:
              # -- SPIRE server image
              image: ghcr.io/spiffe/spire-server:1.8.2@sha256:7d5367f39091d8e12c5487e9f68e997fba744ebec2f561376f7acae250d35b1d
              # -- SPIRE server service account
              serviceAccount:
                create: true
                name: spire-server
              # -- SPIRE server init containers
              initContainers: []
              # -- SPIRE server annotations
              annotations: {}
              # -- SPIRE server labels
              labels: {}
              # SPIRE server service configuration
              service:
                # -- Service type for the SPIRE server service
                type: ClusterIP
                # -- Annotations to be added to the SPIRE server service
                annotations: {}
                # -- Labels to be added to the SPIRE server service
                labels: {}
              # -- SPIRE server affinity configuration
              affinity: {}
              # -- SPIRE server nodeSelector configuration
              # ref: ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
              nodeSelector: {}
              # -- SPIRE server tolerations configuration
              # ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
              tolerations: []
              # SPIRE server datastorage configuration
              dataStorage:
                # -- Enable SPIRE server data storage
                enabled: true
                # -- Size of the SPIRE server data storage
                size: 1Gi
                # -- Access mode of the SPIRE server data storage
                accessMode: ReadWriteOnce
                # -- StorageClass of the SPIRE server data storage
                storageClass: ceph-block
              # -- Security context to be added to spire server pods.
              # SecurityContext holds pod-level security attributes and common container settings.
              # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
              podSecurityContext: {}
              # -- Security context to be added to spire server containers.
              # SecurityContext holds pod-level security attributes and common container settings.
              # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
              securityContext: {}
              # SPIRE CA configuration
              ca:
                # -- SPIRE CA key type
                # AWS requires the use of RSA. EC cryptography is not supported
                keyType: "rsa-4096"
                # -- SPIRE CA Subject
                subject:
                  country: "US"
                  organization: "SPIRE"
                  commonName: "Cilium SPIRE CA"
          # -- SPIRE server address used by Cilium Operator
          #
          # If k8s Service DNS along with port number is used (e.g. <service-name>.<namespace>.svc(.*):<port-number> format),
          # Cilium Operator will resolve its address by looking up the clusterIP from Service resource.
          #
          # Example values: 10.0.0.1:8081, spire-server.cilium-spire.svc:8081
          serverAddress: spire-server.spire-system.svc:8081
          # -- SPIFFE trust domain to use for fetching certificates
          trustDomain: spiffe.cilium
          # -- SPIRE socket path where the SPIRE delegated api agent is listening
          adminSocketPath: /run/spire/sockets/admin.sock
          # -- SPIRE socket path where the SPIRE workload agent is listening.
          # Applies to both the Cilium Agent and Operator
          agentSocketPath: /run/spire/sockets/agent/agent.sock
          # -- SPIRE connection timeout
          connectionTimeout: 30s
