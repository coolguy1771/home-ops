---
# yaml-language-server: $schema=https://kubernetes-schemas.devbu.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: thanos
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: thanos
      version: 11.6.8
      sourceRef:
        kind: HelmRepository
        name: bitnami
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    objstoreConfig:
      type: s3
      config:
        endpoint: minio.default.svc.cluster.local:9000
        bucket: thanos
        insecure: true
    queryFrontend:
      enabled: false
    query:
      enabled: true
      replicaCount: 3
      podAntiAffinityPreset: hard
      replicaLabel: ["__replica__"]
      dnsDiscovery:
        sidecarsService: kube-prometheus-stack-thanos-discovery
        sidecarsNamespace: monitoring
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
        hostname: &host thanos-query.${SECRET_PUBLIC_DOMAIN}
        tls: true
        extraTls:
          - hosts:
              - *host
            secretName: thanos-query-tls
    bucketweb:
      enabled: true
      replicaCount: 3
      podAntiAffinityPreset: hard
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
        hostname: &host "thanos-bucketweb.${SECRET_PUBLIC_DOMAIN}"
        tls: true
        extraTls:
          - hosts:
              - *host
            secretName: thanos-bucketweb-tls
    compactor:
      enabled: true
      extraFlags: ["--compact.concurrency", "4"]
      retentionResolutionRaw: 7d
      retentionResolution5m: 14d
      retentionResolution1h: 30d
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
        hostname: &host "thanos-compactor.${SECRET_PUBLIC_DOMAIN}"
        tls: true
        extraTls:
          - hosts:
              - *host
            secretName: thanos-compactor-tls
      persistence:
        enabled: true
        storageClass: ceph-block
        size: 20Gi
    storegateway:
      enabled: true
      replicaCount: 3
      podAntiAffinityPreset: hard
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
        hostname: &host "thanos-storegateway.${SECRET_PUBLIC_DOMAIN}"
        tls: true
        extraTls:
          - hosts:
              - *host
      persistence:
        enabled: true
        storageClass: ceph-block
        size: 20Gi
    ruler:
      enabled: true
      replicaCount: 3
      podAntiAffinityPreset: hard
      dnsDiscovery:
        enabled: true
      alertmanagers: ["http://kube-prometheus-stack-alertmanager.monitoring:9093"]
      clusterName: home-ops
      extraFlags: ["--web.prefix-header=X-Forwarded-Prefix"]
      config: |-
        groups:
          - name: "PrometheusWatcher"
            rules:
              - alert: "PrometheusDown"
                expr: absent(up{job="kube-prometheus-stack-prometheus"})
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
        hostname: &host "thanos-ruler.${SECRET_PUBLIC_DOMAIN}"
        tls: true
        extraTls:
          - hosts:
              - *host
            secretName: thanos-ruler-tls
      persistence:
        enabled: true
        storageClass: ceph-block
        size: 20Gi
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
  valuesFrom:
    - targetPath: objstoreConfig.config.access_key
      kind: Secret
      name: thanos-secret
      valuesKey: AWS_ACCESS_KEY_ID
    - targetPath: objstoreConfig.config.secret_key
      kind: Secret
      name: thanos-secret
      valuesKey: AWS_SECRET_ACCESS_KEY
